"""
Agent state and response models for LangGraph.
"""

from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from datetime import datetime
import time
from .conversation import Message, Conversation


class AgentState(BaseModel):
    """State maintained by the LangGraph agent."""

    # Conversation context
    conversation_id: str = Field(..., description="ID of the current conversation")
    messages: List[Message] = Field(
        default_factory=list, description="List of messages in the conversation"
    )
    current_message: Optional[Message] = Field(
        None, description="The message currently being processed"
    )

    # Agent context
    agent_name: str = Field("support_agent", description="Name of the current agent")
    agent_role: str = Field("customer_support", description="Role of the current agent")
    conversation_history: List[Dict[str, Any]] = Field(
        default_factory=list, description="Conversation history for context"
    )

    # Processing state
    is_processing: bool = Field(
        False, description="Whether the agent is currently processing a message"
    )
    processing_start_time: Optional[float] = Field(
        None, description="When processing started (timestamp)"
    )
    error_message: Optional[str] = Field(
        None, description="Error message if processing failed"
    )

    # Response generation
    generated_response: Optional[str] = Field(
        None, description="The response generated by the agent"
    )
    response_metadata: Optional[Dict[str, Any]] = Field(
        None, description="Metadata about the generated response"
    )

    # Conversation management
    should_escalate: bool = Field(
        False, description="Whether the conversation should be escalated to a human"
    )
    escalation_reason: Optional[str] = Field(None, description="Reason for escalation")
    conversation_tags: List[str] = Field(
        default_factory=list, description="Tags to apply to the conversation"
    )

    # Performance tracking
    response_time: Optional[float] = Field(
        None, description="Time taken to generate response in seconds"
    )
    confidence_score: Optional[float] = Field(
        None, description="Confidence score of the generated response"
    )

    class Config:
        json_encoders = {datetime: lambda v: v.isoformat()}


class AgentResponse(BaseModel):
    """Response generated by the AI agent."""

    content: str = Field(..., description="The response content")
    message_type: str = Field("text", description="Type of the response")
    conversation_id: str = Field(..., description="ID of the conversation")
    timestamp: datetime = Field(
        default_factory=datetime.utcnow, description="When the response was generated"
    )

    # Response metadata
    confidence_score: Optional[float] = Field(
        None, description="Confidence score of the response"
    )
    response_time: Optional[float] = Field(
        None, description="Time taken to generate the response"
    )
    ai_model: Optional[str] = Field(
        None, description="AI model used to generate the response"
    )

    # Action flags
    should_escalate: bool = Field(
        False, description="Whether human intervention is needed"
    )
    escalation_reason: Optional[str] = Field(None, description="Reason for escalation")
    requires_follow_up: bool = Field(
        False, description="Whether follow-up action is required"
    )

    # Additional data
    metadata: Optional[Dict[str, Any]] = Field(
        None, description="Additional response metadata"
    )
    suggested_actions: List[str] = Field(
        default_factory=list, description="Suggested next actions"
    )

    class Config:
        json_encoders = {datetime: lambda v: v.isoformat()}
